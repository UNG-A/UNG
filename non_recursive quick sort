#include <stdio.h>
#include <stdlib.h>
//non-recursive quick _sort 
/*
//initializing
//push ,pop
*/

typedef struct {

	int ptr;
	int max;
	int* arr;
}stk;



stk *initializng(int max) {
	stk* s = malloc(sizeof(stk));
	s->ptr = 0;
	s->max = max;
	s->arr = calloc(max, sizeof(int));


	return s;

}

int isEmpty(stk* s) {

	if (s->ptr <= 0)
		return -1;
	else {
		return 0;
	}

}
int push(stk* s, int n) {
	if (s->ptr == 0) {

		s->arr[s->ptr] = n;

}

 if (s->ptr <= s->max) {
		s->arr[++s->ptr] = n;
	}
	else {
		return -1;
	}
}


int pop(stk* s, int* temp) {// this is call by reference -> give the address of the value . and return that . so it could be in the memory if not(call by value) : just copy of parameter is used.

	if (isEmpty(s) != -1) {
		*temp = s->arr[s->ptr--];
		return *temp;
	}
	else {
		return - 1;
	}

}

void swap(int *a, int *b) {

	int temp = *a;
	*a = *b;
	*b = temp;

}

void  non_recur_quick_sort(int a[],int left, int right) {
	stk* leftside = initializng(10);
	stk* rightside = initializng(10);
	
	
	push(leftside, left);
	push(rightside, right);

	while (isEmpty(leftside) != -1 && isEmpty(rightside) != -1) {

		int pl = pop(leftside, &left); //make the pl , left equal
		int pr = pop(rightside, &right);//make the pr , right equal

		int pm = (pl + pr) / 2;

		while (pr >= pl) {
			while (a[pl] < a[pm]) pl++;
			while (a[pr] > a[pm])pr--;

			if (pl <= pr)
			{
				swap(&a[pl], &a[pr]);
				pl++;
				pr--;
			}
		}
		// I need to put first the bigger number of index. (for efficient locality)
		/*
		pr-left , right-pl two of one is more bigger than one.
		int a = pr-left > right-pl ? 1 : 0

		if(a==1)
		*/
		int a = (pr - left) >= (right - pl) ? 1 : 0;

		// the ploblem is if statement does not quailify both statement,

		if (a == 1) {

			if (pr > left) {
				push(leftside, left);
				push(rightside, pr);

			}
		



		if (pl < right) {
			push(leftside, pl);
			push(rightside, right);

		}
	}
		else {



			if (pl < right) {
				push(leftside, pl);
				push(rightside, right);

			}


			if (pr > left) {
				push(leftside, left);
				push(rightside, pr);

			}

		}

	}
	

}

void print(int arr[], int n)
{


	int i;

	for (i = 0; i < n; i++) {
		printf("%2d", arr[i]);
	}

}


int main() {


	int arr[9] = {5,8,4,2,6,1,3,9,7 };
	non_recur_quick_sort(arr, 0, 8);
	print(arr, 9);


}

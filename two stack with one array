#include <stdio.h>
#include <stdlib.h>


//Make the stack


typedef struct {

	int* arr;
	int max;
	int ptr;

}stk;



stk* initializing(stk *s, stk *s1,int max,int decision_number) { 

	s->arr =calloc(max,sizeof(int));
	s->max = max;
	s->ptr = 0;

	s1->arr = s->arr;
	s1->max = s->ptr;
	s1->ptr = s->max;

	if (decision_number == 0)
		return s;
	else
		return s1;
}



int isEmpty(stk *s,stk *s1, int decision_number) {
	if (decision_number == 1) {
		if (s->ptr <= 0)
			return -1;
	}
	else {
		if(s1->ptr >= s->max)
			return -1;
	}
}

int isFull(stk *s,stk *s1) {

	if (s->ptr >= s1->ptr)
		return -1;
}

void add(stk* s, stk*s1, int n,int decision_number) {
	if (decision_number == 1)
	{
		if (isFull(s, s1) != -1)
		{
			s->arr[s->ptr++] = n;
		}
	}
	else {
		if (isFull(s, s1) != -1)
			s1->arr[--s1->ptr] = n;
	}
}


void pop(stk *s,stk *s1, int decision_number) {
	
	if (decision_number == 1) {
		if (isEmpty(s, s1, 1)!=-1) {
			s->arr[--s->ptr]=0;
		}
	}
	else {
		if (isEmpty(s, s1, 0) != -1) {
			s1->arr[s1->ptr++]=0;
		}
	}

}
int peek(stk *s, stk *s1, int decision_number) {
	if (decision_number == 1)
		return s->arr[s->ptr - 1];
	else
		return s1->arr[s->ptr + 1];
}
void print(stk *s) {

	int i;
	for (i = 0; i < s->max; i++) {
	printf("%4d",s->arr[i]);
	}


}


int main() {

	stk* s = malloc(sizeof(int));
	stk* s1 = malloc(sizeof(int));
	s=initializing(s,s1,10,0);
	s1 = initializing(s, s1, 10, 1);
	add(s,s1, 10,1);
	add(s, s1, 20, 1);
	add(s, s1, 90, 0);
	add(s, s1, 90, 0);
	pop(s, s1, 0);
	add(s, s1, 80, 0);
	pop(s, s1, 1);
	add(s, s1, 20, 1);
	add(s, s1, 30, 1);
	add(s, s1, 40, 1);
	add(s, s1, 50, 1);
	add(s, s1, 60, 1);
	add(s, s1, 70, 1);
	add(s, s1, 75, 1);
	add(s, s1, 77, 1);
	add(s, s1, 77, 0);


	print(s);


}

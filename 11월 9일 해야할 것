#include <stdio.h>
#include <stdio.h>


//straight insertion

void swap(int* a, int* b) {

	int temp = *a;
	*a = *b;
	*b = temp;

}

int binary_search_NO_key(int a[], int n, int key) {

	int pl = 0;
	int pr = n;
	while (pl <= pr) {
		int pm = (pl + pr) / 2;

		if (a[pm] == key) {
			return pm; // move all of the index from pm to the end.

		}
		else if (pm==0 && pl==0) {

			return 0;
		}
		else if(a[pm] > key) {

			pr = pm - 1;
		}
		else {

			pl = pm + 1;
		}
	}
	// if a[pm] is not equal. now is two case.

	if (a[(pl + pr) / 2] < key)
		return pl; // because the terminate condition is. when pl<=pr -> this means eventaully pl wii be more bigeer.

	else
		return pr;


}


void straight_insertion(int a[], int n) {
	int i;
	int j;

	for (i = 1; i < n; i++) {
		int tempvalue = a[i];
		int temp = binary_search_NO_key(a, i, a[i]);// now get the index. but move to the index from return index
		a[temp] = tempvalue;
		a[i] == NULL;
		for (j = temp+1; j < n - 2; j++) {
			a[j] = a[j];

		}
			


	}

}

void print(int arr[], int n) {

	int i;
	for (i = 0; i < n; i++) {
		printf("%3d", arr[i]);
	}
}

int main() {


	int arr[8] = { 6,4,1,7,3,9,8,NULL};
	straight_insertion(arr, 8);
	print(arr, 8);
}

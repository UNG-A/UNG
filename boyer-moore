#include <stdio.h>
#include <string.h>

// The preprocessing function for Boyer Moore's good suffix heuristic
// the table was made as progressively I increased by 1, J decreased by 1.
// By fixing J value, it makes adjust "i" value
int* createGS(char* pat, int M)
{
    int* gs = calloc(strlen(pat), sizeof(int));
    int i; // index for pattern suffix
    int j = 0; // index for partial pattern suffix

    // initialize gs array
    for (i = 0; i < M; ++i)
        gs[i] = M;

    i = M - 1;
    while (i > 0)
    {
        if (j >= 0 && pat[i+j] == pat[j]) { // let's see why put the pat[i+j] just use only decrease j-- could be -> (i-1) doesn't need to decrease twice
            j--;
        }
        else {
            if (j < 0) {
                // case 1. partial good suffix matches prefix of pattern
                for (;i+j>=0 ; j--)
                    gs[i+j] = i; // so i value will be same . so does not have to set the eqal varialbe with "i"
            }
            else {
                // case 2. good suffix matches somewhere in the pattern
                // set i to the shift length in gs[] element
                // whose index is the unmatched position
                gs[i+j] = i;//J is the variable in this code. If I set gs[i] = i (and ocured only weak good suffix rule the result is 1,2,3,4,5 ----)
            }
          
            j = M - i;// I was confused this. M is length of string. so M =i+1; , as a result -> M-i = 1; so J could be increased by 1.
            i--;
         
          // also if I set J = M-i; does not have to set same value with "j"
        }
    }

    return gs;
}

void searchBM(char* pat, char* txt)
{
    int N = strlen(txt);
    int M = strlen(pat);
    int* gs = createGS(pat, M);
    int s = 0; // Shift of the pattern with respect to text
    int j = 0; // Index for pat[]    

    while (s <= (N - M)) {
        j = M - 1;

        // Keep reducing index j of pattern while characters of
        // pattern and text are matching at this shift s
        while (j >= 0 && pat[j] == txt[s + j])
            j--;

        if (j < 0) {
            printf("Pattern found at index %d \n", s);
            // Shift the pattern as the length of the maximum full suffix in pattern.
            s += gs[0];
        }
        else {
            // Shift the pattern so that the good suffix in text
            // aligns with the last occurrence of it in pattern.
            s += gs[j];
        }
    }

}

// Driver program to test above function
int main()
{
    char txt[] = "AABBBAACABACBA";
    char pat[] = "ABACBA";

    //searchBM(pat, txt);
    int* gs = createGS(pat, 6);
    for (int i = 0; i < strlen(pat); i++) {
        printf("%d",gs[i]);
    }
 
}




#include <stdio.h>
#include <stdlib.h>


int array[7] = { 0 };
int Size = 7;
int Prime = 13;

int HashFunction(int data ) {

	return data % Size;

}

int HashFunction2(int data) {

	return Prime - (data % Prime);
}



int isFull(int index) {

	if (array[index] != 0) {
		return -1;
	}
}
/*
//1st method for handling open addressing clustering
void linear_probing(int index,int data) {
	//check the each side of the direction. and when the counter is equal to size terminate the function

	int i;
	int counter = 0;
	//if find the empty index input the data and terminate.
	for (i = index; i < Size; i++) {
		
		if (isFull(i) != -1) {
			array[i] = data;
			counter = 1;
			break;
		}
	}
	// if the right of direction indexs are filled. -> next for statement executed.
	if (counter != -1) {
		for (i = index; i > 0; i--) {
			++counter;
			if (isFull(i) != -1)
				array[i] = data;
			break;
		}
	}
}
*/
/*

int quadratinc_probing(int index, int data) {
	//Q . how to handle infinite loop? if all of array indexes are filled. it will be executed endlessly.so need to check all array is full or not
	int i = 0;
	if (Check_All_Fiiled() == -1) {
		return -1;
	}
	else {
		while (1) {//executing til finding empty array

			if (array[index] != 0) {
					++i;
					index =(index + (i * i)) % Size;
			}
			if (array[index] == 0) {

				array[index] = data;
				break;
			}


		}

	}


}
*/

int DoubleHashing(int index, int data) {
	int i = 0;
	if (Check_All_Fiiled() == -1)
		return -1;

	else {
		while (1) {
			++i;
		
			if (array[index] != 0) {
				index = (HashFunction(data) + (i * HashFunction2(data))) % Size;
			}
			else {
				array[index] = data;
				break;

			}
		}


	}


}




int Check_All_Fiiled() {
	int i;
	int counter = 0;

	for (i = 0; i < Size; i++) {
		if (array[i] !=0) {
			counter++;
		}
	}

	if (counter == Size)
		return -1;

}

void add(int data) {
	int index = HashFunction(data);
	if (isFull(index) == -1) {
		//clustering.->there are few method for handling clustering.
		//linear_method(index, data);
		//quadratinc_probing(index, data);
		DoubleHashing(index, data);
				}
	else {
		//fill the array
		array[index] = data;
	}


}


void print() {

	int i;
	for (i = 0; i < Size; i++) {
		printf("%3d", array[i]);
	}
}

int main() {
	add(10);
	add(20);
	add(30);
	add(26);
	add(40);
	add(60);
	add(56);
	print();

	
}




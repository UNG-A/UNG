#include <stdio.h>
#include <stdlib.h>

//HANOI top non_recursive


typedef struct {

	int max;
	int* arr;
	int ptr;

}stk;

stk* s;// global scope for not putting struct pointer variable in the hanoi function


//type conversion(implicit type conversion(Automatic type conversion)
void move(char a, char b) {

	printf("%2c to %2c\n", a, b);

}


void swap(char * a, char* b) {
	char temp = *a;
	*a = *b;
	*b = temp;
}


stk* initializing(stk *s ,int max) {
	s->max = max;
	s->arr = calloc(max, sizeof(int));
	s->ptr = 0;
}

int isEmpty(stk *s){
	if (s->ptr <= 0)
		return -1;
}

void push(stk* s, int a) {

	s->arr[s->ptr++] = a;
	
}

int pop(stk *s) {

	return s->arr[--s->ptr];

}

void hanoi_Top(int n, char A, char B, char C) {
	
	while (1) {

		while (n > 1) {

			push(s,n);
			push(s,A);
			push(s, B);
			push(s, C);
			
			n--;
			push(s, B);
			B = C;
			C = pop(s);
		}

		move(A, C);
		 I was confused with this part. Didn't push hanoi(1,A,B,C) so I thought It was wrong. but I didn't need to . just see the 
        //this move function even if I didn't push the hanoi function, the parameter value "A" and "B" was swapped. so it will be printed  A to c! 


		if (isEmpty(s) != -1) {
			C=pop(s); 
			B =pop(s);
			A =pop(s);
			n = pop(s); 
			
			 // And this is the second confuseed part . in my code when hanoi(2,B,A,C) was printed it need to be puhsed by first recursive function. But I add to 
            //second actual pushed task this part. so hanoi(1,A,B,C) was pushed first. so solution is just swapped the parameter here .and push the stack at the top of the while loop.
            
			
			
			move(A, C);
			n--;
			push(s,A);
			A = B;
			B = pop(s);


		}

		else {
			break;
		}


	}

}


int main() {
	s = malloc(sizeof(int));
	s = initializing(s,100);
	int from = 'A';
	int by = 'B';
	int to = 'C';
	hanoi_Top(3, from, by, to); // so (3 ,65,66,67)

	
}

	

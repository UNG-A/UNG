#include <stdio.h>
#include <stdlib.h>

//doubly side of stack in one stack array -> specification
//1. this is not patitioned. it menas stack A capacity is not max/2 ;
//2. it can be easily added or pop for each side of stack.

//1. initializing.
//2 .push
//3. pop
//4.peek.
//5.search
//6.isFull
//7.isEmpty
//8.print


typedef struct {

	int ptr;
	int max;
	int* stk; // stack pointer. 

}stack;

stack* initializing(int max) {//return structure pointer.
	stack* s = malloc(sizeof(stack));
	s->max = max;
	s->ptr = 0;
	s->stk = (struct stack*)malloc(sizeof(int) * max);

	return s;
}

stack* initializing2(stack* s) {

	stack* s1 = malloc(sizeof(stack));

	s1->stk = s->stk;
	s1->ptr = s->max-1;
	s1->max = 0;

	return s1;
}
int isFull(stack* s) {

	if (s->max <= s->ptr)
		return -1;


}

int isEmpty(stack* s) {
	if (s->ptr <= 0)
		return -1;

}

int push(stack* s,stack *s1, int n) {

	if (isFull(s) == -1 || s->ptr > s1->ptr) { // for blocking reallocating for each other , and I gave priority. push (orignial not including > = instead of >)
		return -1;
	}
	else {

		s->stk[s->ptr++] = n;

	}
}

int push2(stack* s1, stack *s, int n) {

	if (isFull(s) == -1 || s1->ptr <= s->ptr)

		return -1;

	else {
		s1->stk[(s1->ptr)--
		
		
		
		
		
		
		] = n; //ptr is number 10 . so I need set ptr =9 ; 
	}

}


int search(stack* s, int n)
{
	int i;
	for (i = 0; i < s->ptr; i++) {

		if (s->stk[i] == n) {
			printf("%d th in the stack", i);
			return i;

		}
	}
	if (s->stk[i] == n) {
		printf("fail to search");
	}// at the last of loop -> i will be s->ptr ; if s->stk[i] is not n , that is fail to search.
}
int pop(stack* s) {

	if (isEmpty(s) == -1)
		return -1;
	else {
		// *n =  < means -> access the physical address and give the value.>
		s->stk[--s->ptr]=NULL;
		//pop다시.
		
	}

}

int pop2(stack* s1, stack* s) {

	if (s1->ptr >= s->max) // nothing stack in the second stack
		return -1;
	else {
		s1->stk[++(s1->ptr)]=NULL; // I had minus s->ptr pointer. need to fix it
	}
}

void print_all(stack* s) {

	int i;
	for (int i = 0; i < s->max; i++) {

		printf("%4d", s->stk[i]);
	}

}






int main() {
	int* x = malloc(sizeof(int)); // 
	stack* s = initializing(10);
	stack* s1 = initializing2(s);
	push(s,s1, 10);
	push(s,s1, 20);
	push(s,s1, 30);
	push(s,s1, 40);
	push2(s1, s, 100);
	push2(s1, s, 90);
	push2(s1, s, 80);
	push2(s1, s, 70);
	push2(s1, s, 60);
	push(s,s1, 50);
	push2(s1, s, 550);
	pop2(s1, s);
	pop(s, x);
	//push(s, s1, 200);

	print_all(s);

	//printf("%p", x);


}
